<!DOCTYPE html>
<html>
<head>
	<title>Web Api for streaming</title>
    <link rel="stylesheet" href="style.css">
   
</head>
<script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js" defer></script>



<style>
    .video{
height:300px;
width:400px;
    }
</style>

<body>
     	<h3 id="show-peer"></h3>
     	<div style="display:flex;justify-content:space-around;margin:10px;">
     	<div style="width:600px;height:300px;border:2px solid ;" id="ourVideo">
<video id="our_vids"></video>
        </div>

         <div style="width:600px;height:300px;border:2px solid ;" id="remoteVideo">
             <video id="vids"></video>

         </div>

     	</div>
        <br>
     	<input id="peerID" placeholder="Peer Id"/>
     	
        <button id="callPeer">Call Peer</button><hr>

     	<button id="shareScreen">Share Screen<button/>


<script >
window.addEventListener('load',(event)=>{

    
var peer=new Peer();
var mystream;
var peerList=[]
var currentPeer;
peer.on('open',(id)=>{
console.log(id);
document.getElementById("show-peer").innerHTML=id;
})
peer.on('call',(call)=>{

navigator.mediaDevices.getUserMedia({video:true,audio:true})
    .then(stream=>{
mystream=stream;

call.answer(stream);
addOurVideo(stream)
call.on('stream',remoteStream=>{
    if(!peerList.includes(call.peer)){
    addRemoteVideo(remoteStream);
    currentPeer=call.peerConnection;
peerList.push(call.peer)
}
})
call.on('close',()=>{
    let video=document.getElementById("our_vids");
    video.remove();

})

    })
    .catch(e=>console.log(e));

})
document.getElementById("callPeer").addEventListener('click',(e)=>{
    let remotePeerId=document.getElementById("peerID").value;
    document.getElementById("show-peer").innerHTML="connecting... "+remotePeerId;
    callPeer(remotePeerId);

})
document.getElementById("shareScreen").addEventListener('click',e=>{
navigator.mediaDevices.getDisplayMedia({video:{cursor:"always"},
audio:{
echoCancellation:true,
noiseSuppression:true,

}
}).then(stream=>{
let videoTrack=stream.getVideoTracks()[0];
videoTrack.onended=function(){
stopScreenShare();

}
let sender=currentPeer.getSenders().find(function(s){
    return s.track.kind==videoTrack.kind
})
sender.replaceTrack(videoTrack);
}).catch(e=>console.log(e))
})
function stopScreenShare(){
let videoTrack=mystream.getVideoTracks()[0];
let sender=currentPeer.getSenders().find(function(s){
    return s.track.kind==videoTrack.kind
})
sender.replaceTrack(videoTrack);

}
function callPeer(id){

    navigator.mediaDevices.getUserMedia({video:true,audio:true})
    .then(stream=>{
mystream=stream;
addOurVideo(stream);
let call=peer.call(id,stream)
call.on('stream',(remoteStream)=>{
    if(!peerList.includes(call.peer)){
    addRemoteVideo(remoteStream);
    currentPeer=call.peerConnection;

peerList.push(call.peer)
}
})
call.on('close',()=>{
    let video=document.getElementById("vids");
    video.remove();

})

    })
    .catch(e=>console.log(e+"error"));
}
function addRemoteVideo(stream){

    let video=document.getElementById("vids");
    video.srcObject=stream;
    
video.classList.add("video");
            video.play();
    
   
    console.log(stream);
   // document.getElementById("remoteVideo").append=video;
 
}
function addOurVideo(stream){

    let video=document.getElementById("our_vids");
    video.srcObject=stream;
    
//video.classList.add("video");
            video.play();
    
   
    console.log(stream);
   // document.getElementById("remoteVideo").append=video;
 
}

})	


</script>


    
    
</body>

</html>